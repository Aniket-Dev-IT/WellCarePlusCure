# Generated by Django 5.2.6 on 2025-09-08 15:32

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Doctor's first name", max_length=100)),
                ('last_name', models.CharField(help_text="Doctor's last name", max_length=100)),
                ('phone', models.CharField(help_text='Primary contact phone number', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(help_text='Professional email address', max_length=254, unique=True)),
                ('specialty', models.CharField(choices=[('cardiology', 'Cardiology'), ('neurosurgery', 'Neurosurgery'), ('acupuncture', 'Acupuncture'), ('cardiac_surgery', 'Cardiac Surgery'), ('dentistry', 'Dentistry'), ('ent', 'Ear, Nose, and Throat'), ('gynecologic_oncology', 'Gynecologic Oncology'), ('plastic_surgery', 'Plastic Surgery'), ('orthopedics', 'Orthopedics'), ('pediatrics', 'Pediatrics'), ('dermatology', 'Dermatology'), ('psychiatry', 'Psychiatry'), ('general_medicine', 'General Medicine')], db_index=True, help_text="Doctor's medical specialty", max_length=50)),
                ('qualification', models.CharField(help_text='Medical qualifications and degrees', max_length=200)),
                ('experience_years', models.PositiveIntegerField(help_text='Years of professional experience', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('consultation_fee', models.DecimalField(decimal_places=2, help_text='Consultation fee in local currency', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('state', models.CharField(db_index=True, help_text='State where the doctor practices', max_length=100)),
                ('city', models.CharField(db_index=True, help_text='City where the doctor practices', max_length=100)),
                ('address', models.TextField(help_text='Complete address of the clinic/hospital')),
                ('photo', models.ImageField(default='doctors/photos/default.png', help_text='Professional profile photograph', upload_to='doctors/photos/%Y/%m/')),
                ('bio', models.TextField(blank=True, help_text='Brief professional biography', max_length=1000)),
                ('is_available', models.BooleanField(default=True, help_text='Whether the doctor is currently accepting appointments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Associated user account for authentication', on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField(help_text='Date of the appointment')),
                ('appointment_time', models.TimeField(help_text='Time of the appointment')),
                ('duration_minutes', models.PositiveIntegerField(default=30, help_text='Duration of appointment in minutes', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180)])),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], db_index=True, default='scheduled', max_length=20)),
                ('patient_notes', models.TextField(blank=True, help_text='Notes or symptoms provided by the patient')),
                ('doctor_notes', models.TextField(blank=True, help_text="Doctor's notes about the appointment")),
                ('patient_phone', models.CharField(blank=True, help_text="Patient's contact phone number", max_length=17)),
                ('patient_email', models.EmailField(blank=True, help_text="Patient's email address", max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fee_charged', models.DecimalField(blank=True, decimal_places=2, help_text='Fee charged for this appointment', max_digits=10, null=True)),
                ('is_paid', models.BooleanField(default=False, help_text='Whether the appointment fee has been paid')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to=settings.AUTH_USER_MODEL)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='doctors.doctor')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
                'ordering': ['-appointment_date', '-appointment_time'],
            },
        ),
        migrations.CreateModel(
            name='DoctorAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='doctors.doctor')),
            ],
            options={
                'verbose_name': 'Doctor Availability',
                'verbose_name_plural': 'Doctor Availabilities',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1 Star - Poor'), (2, '2 Stars - Fair'), (3, '3 Stars - Good'), (4, '4 Stars - Very Good'), (5, '5 Stars - Excellent')])),
                ('title', models.CharField(blank=True, max_length=200)),
                ('comment', models.TextField(blank=True, help_text='Detailed review comment', max_length=1000)),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review', to='doctors.appointment')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='doctors.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['specialty', 'city'], name='doctors_doc_special_d7b64d_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['city', 'is_available'], name='doctors_doc_city_cbdb55_idx'),
        ),
        migrations.AddIndex(
            model_name='doctor',
            index=models.Index(fields=['created_at'], name='doctors_doc_created_04e2c9_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['doctor', 'appointment_date'], name='doctors_app_doctor__ea392e_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['patient', 'appointment_date'], name='doctors_app_patient_c22f93_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['status'], name='doctors_app_status_1a9da5_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['appointment_date', 'appointment_time'], name='doctors_app_appoint_5b6fb7_idx'),
        ),
        migrations.AddConstraint(
            model_name='appointment',
            constraint=models.UniqueConstraint(fields=('doctor', 'appointment_date', 'appointment_time'), name='unique_doctor_appointment_slot'),
        ),
        migrations.AlterUniqueTogether(
            name='doctoravailability',
            unique_together={('doctor', 'day_of_week', 'start_time')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('doctor', 'patient')},
        ),
    ]
